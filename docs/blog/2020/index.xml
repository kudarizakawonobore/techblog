<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>下り坂を昇るブログ</title>
    <link>https://kudarizakawonobore.github.io/techblog/blog/2020/</link>
    <description>Recent content on 下り坂を昇るブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 20 Feb 2020 23:09:00 +0900</lastBuildDate>
    
	<atom:link href="https://kudarizakawonobore.github.io/techblog/blog/2020/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raspberry Pi で QR コードリーダーからプログラムを動かす</title>
      <link>https://kudarizakawonobore.github.io/techblog/blog/2020/02_qrcode/</link>
      <pubDate>Thu, 20 Feb 2020 23:09:00 +0900</pubDate>
      
      <guid>https://kudarizakawonobore.github.io/techblog/blog/2020/02_qrcode/</guid>
      <description>概要 市販のQRコードリーダーを使って、処理を行うデバイスを Raspberrypi で作るときの実装について書く。
知っておきたいこと USB タイプの QR コードリーダーや、バーコードリーダーは、キーボードと同様の入力デバイスとして扱われる。
QR コードを Read する（＝デコードする）と、市販の QRコードリーダーが テキスト文字列として PC に入力してくれる。
単に値を解読したいだけなら、テキストエディタを開いて読み込んであげるだけでよい。 自作のアプリを作って、解読した値を渡したいなら、キーボードのイベントをListenするプログラムを書いてあげればよい。
環境 Raspberry Pi 3 OS: Raspbian Python: 3.6.5
候補 Python でキーボードの入力を取得するためのライブラリはいくつかあるが、今回は keyboard を採用した。
下記は、キーボードの入力を取得するためのライブラリ。
pynput(不採用) キーボードやマウスの入力を Listen できるライブラリ。 keyboard 同様、文字列として入力を受け付けられるが、バックグラウンドで実行させることができなさそうなので、不採用。
envdev(不採用) pynput と異なり、バックグラウンドで実行させられる他、デバイスを指定することができる。 一方で、発生したイベントがコード文字列(KEY_A や KEY_B など）になってしまうためコードを文字列に戻してやる処理が必要になる。
keybard(採用) バックグラウンドで実行でき、文字列をそのまま入力できるので、採用。
インストール pip で keyboard をインストールする
pip install keybard実装 import keyboardimport timeqr = &amp;#34;&amp;#34;def key_press(key):global qrif key.name == &amp;#34;enter&amp;#34;:print(qr)elif &amp;#39;shift&amp;#39; in key.</description>
    </item>
    
    <item>
      <title>iPhone のカメラで撮影した画像を直接PC に取り込む</title>
      <link>https://kudarizakawonobore.github.io/techblog/blog/2020/01-capture/</link>
      <pubDate>Sun, 16 Feb 2020 20:58:40 +0900</pubDate>
      
      <guid>https://kudarizakawonobore.github.io/techblog/blog/2020/01-capture/</guid>
      <description>動機 Jupyter/OpenCV などで画像処理のロジックを書いていると、主に閾値調整やフィルタリング処理が、テスト用に使っている画像に局所最適化されてしまうことがままある。
ある程度ロジックを書いた後、複数の写真を撮ってテストできれば、調整もたやすく、コードの汎用性も上がるはず。
一方で、iPhone の画像は、何枚か撮影して、メールや iCloud, Google Photo などを使えばインターネット越しで共有できるが、そうすると、ファイル名がわかりづらかったり、Zip を解凍したりと、いくつか面倒な作業が発生する。
せっかく手元に iPhone があるのだから、直接取り込んであげられれば、作業もはかどりそうなものである。
結論 今回は外部のツールを使うだけなので、いたってシンプル。 iVCam という iPhone のアプリを使うだけ。
準備 スマホ側と、PC 側にアプリをインストールするだけ。
スマホ側 iVcam で検索。 無償版は、ファイル内にロゴが映りこむため、有償版を使った方が良い。
PC 版 こちらのサイトからダウンロードして、インストールする。 https://www.e2esoft.com/ivcam/
実行するとき PC,スマホの両方でアプリを起動している状態で、かつ、同一ネットワーク上にいると、iPhone のカメラに映っている映像がそのままPC でキャプチャ、保存できる。
撮影した画像は、アプリ側で任意のディレクトリに保存できる。 機械学習用に、アノテーション付きでファイルを管理したい場合は、撮影するタイミングでディレクトリ分けができるので、画像の管理がかなりラクになる。
利点 無線ネットワーク越しにファイルを取り込めるので、例えば、有線のWebカメラのように物理的な範囲の制限がないのが魅力。 例えば、スマホを3脚に固定しておいて、定点で複数枚写真を撮るような要件にも対応できる。
欠点 解像度はそんなに高くない模様。そのため、OCR に使おうと思うと、いまいち文字が認識しづらかったりする。</description>
    </item>
    
    <item>
      <title>はてなブログを卒業して GitHubPages × Hugo にしてみた</title>
      <link>https://kudarizakawonobore.github.io/techblog/blog/2020/00-hugo/</link>
      <pubDate>Mon, 20 Jan 2020 23:30:27 +0900</pubDate>
      
      <guid>https://kudarizakawonobore.github.io/techblog/blog/2020/00-hugo/</guid>
      <description>動機 いままで個人ブログの作成を はてなブログでやっていたが、下記のような課題を感じていた
エディタ・コピペ問題 普段、あらゆるエディタのキーバインドを Vim 仕様にしているせいで、ブログの記述も Vim キーバインドでやりたい。
はてなブログの サイト上のエディタ では 私の知る限り、 Vim キーバインドで記述するのは難しい。 そのため、ローカルで Markdown 形式でファイルを作成し、コピペする方式になるのだが、 そうすると下記のような問題にぶち当たる。
Preview 煩わしい問題 記事を書き終わった後、ローカルで記述した記事を公開用に調整（主に見た目）するときに、何度も Preview → 書き直し を繰り返すことになる。 これが、ページ遷移が何度も発生するため、かなり煩わしい。
ローカルでサクサクと、公開用の見た目を調整して、ワンコマンドで公開、なんてことを目指したいところ。
実際、はてなブログ用のCSS やらをローカルに落としてきて、疑似的に開発環境を構築することもできるのだろうが、最近は静的サイトジェネレータと、GitHubPages を使えば、簡単に上記課題を解決できるので思い切って移行してみることにした。
Hugo 静的サイトジェネレータを複数試してみて、最後、公開方法が簡単な Hexo と迷ったが、LiveReload の速さが決め手で、Hugo を選択することにした。
Hugo とは、静的サイトジェネレータの1種で、 Go によって動く。
インストール方法 前提 下記はインストール済みである前提
 Go Git  インストール手順（簡単） 下記リンクから、exe をダウンロードして、Pathを通すだけでOK
https://github.com/gohugoio/hugo/releases
公式サイトには、　Chocolatey を使ってインストールする方法が記述されているので、 お好きな方で。
各種 コマンド サイトを作成 hugo new site &amp;lt;サイトを管理するディレクトリ名&amp;gt;上記コマンドを実行すると、ディレクトリに必要なファイルが生成されます。
新しい記事を作成 新しいページを作成するには、下記のコマンドを実行する。
hugo new post/00_hugo.mdローカルで確認するには 下記コマンドで、 ローカルにサーバーを立ち上げて、 Live Reload で確認できる</description>
    </item>
    
  </channel>
</rss>